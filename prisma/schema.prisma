generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model config {
  id         Int      @id @default(autoincrement())
  name       String
  value      String
  edit_type  String   @default("input")
  added_at   DateTime @default(now())
  updated_at DateTime @updatedAt
}

model user {
  id      Int    @id @default(autoincrement())
  ziqx_id String
  name    String
  role    String @default("user")
  team    team?  @relation(fields: [teamId], references: [id])

  added_at      DateTime @default(now())
  updated_at    DateTime @updatedAt
  delete_status Boolean  @default(false)
  teamId        Int?
}

model team {
  id            Int           @id @default(autoincrement())
  name          String
  code          String?
  added_at      DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  delete_status Boolean       @default(false)
  user          user[]
  participant   participant[]
}

model user_invitation {
  id            Int      @id @default(autoincrement())
  email         String
  role          String   @default("user")
  added_at      DateTime @default(now())
  updated_at    DateTime @updatedAt
  delete_status Boolean  @default(false)
}

model category {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  added_at      DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  delete_status Boolean   @default(false)
  program       program[]
}

model stage {
  id            Int       @id @default(autoincrement())
  name          String
  location      String?
  description   String?
  added_at      DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  delete_status Boolean   @default(false)
  program       program[]
}

model program {
  id                 Int      @id @default(autoincrement())
  name               String
  category           category @relation(fields: [categoryId], references: [id])
  stage              stage?   @relation(fields: [stageId], references: [id])
  time               String?
  description        String?
  no_of_participants Int      @default(1)
  type               String   @default("individual")
  stageType          String   @default("stage")

  added_at            DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  delete_status       Boolean               @default(false)
  categoryId          Int
  stageId             Int?
  program_participant program_participant[]
  ytvideo             ytvideo[]
  result              result[]
}

model participant {
  id                  Int                   @id @default(autoincrement())
  name                String
  chest_no            String
  father_name         String?
  place               String?
  team                team?                 @relation(fields: [teamId], references: [id])
  added_at            DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  delete_status       Boolean               @default(false)
  program_participant program_participant[]
  teamId              Int?
}

model program_participant {
  id          Int          @id @default(autoincrement())
  program     program?     @relation(fields: [programId], references: [id])
  participant participant? @relation(fields: [participantId], references: [id])
  code_letter String?
  win_place   Int          @default(0)
  score       Int          @default(0)
  grade       String?
  is_attended Boolean      @default(false)

  added_at      DateTime @default(now())
  updated_at    DateTime @updatedAt
  delete_status Boolean  @default(false)

  programId     Int?
  participantId Int?
}

model posters {
  id          Int      @id @default(autoincrement())
  type        String   @default("result")
  theme       String   @default("light")
  file_name   String
  header_locx Int      @default(0)
  header_locy Int      @default(0)
  body_locx   Int      @default(0)
  body_locy   Int      @default(0)
  footer_locx Int      @default(0)
  footer_locy Int      @default(0)
  added_at    DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ytvideo {
  id        Int      @id @default(autoincrement())
  title     String
  yt_id     String
  prgram    program? @relation(fields: [programId], references: [id])
  added_at  DateTime @default(now())
  programId Int?
}

model team_point {
  id         Int      @id @default(autoincrement())
  team_id    Int
  point      Int
  added_at   DateTime @default(now())
  updated_at DateTime @updatedAt
}

model result {
  id          Int     @id @default(autoincrement())
  count       Int     @unique
  winners     String
  isPublished Boolean @default(false)

  added_at   DateTime @default(now())
  updated_at DateTime @updatedAt

  program       program        @relation(fields: [programId], references: [id], onDelete: Cascade)
  advertisement advertisement? @relation(fields: [advertisementId], references: [id], onDelete: SetNull)

  advertisementId Int?
  programId       Int
}

model advertisement {
  id           Int    @id @default(autoincrement())
  name         String
  image        String
  subscription Int

  results result[]

  added_at   DateTime @default(now())
  updated_at DateTime @updatedAt
}

model team_point_v2 {
  id         Int      @id @default(autoincrement())
  after      Int?
  isFinal    Boolean  @default(false)
  points     String
  added_at   DateTime @default(now())
  updated_at DateTime @updatedAt
}
